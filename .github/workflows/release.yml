name: Release

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ["pyproject.toml"]

jobs:
  release:
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Set up uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Run tests
        run: make tests

      - name: Get package version
        id: package-version
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Check if tag exists
        id: tag-check
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION does not exist, proceeding with release"
          fi

      - name: Generate release notes
        id: release-notes
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"

          # Find the most recent previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            # Generate changelog from the last tag
            COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
            COMPARE_URL="https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...v$VERSION"
          else
            # If there are no previous tags, use the latest commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" -10)
            COMPARE_URL="https://github.com/${{ github.repository }}/commits/v$VERSION"
          fi

          # Create the release notes
          cat > release_notes.md << EOF
          ## What's Changed

          $COMMITS

          **Full Changelog**: $COMPARE_URL

          ## Installation

          \`\`\`bash
          pip install gh-folder-download
          # or
          uv add gh-folder-download
          \`\`\`
          EOF

          # Read the content for the output
          RELEASE_NOTES=$(cat release_notes.md)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build package
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          echo "Building version ${{ steps.package-version.outputs.version }}..."
          uv build
          echo "‚úÖ Package built successfully!"

      - name: Create Release
        if: steps.tag-check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: steps.tag-check.outputs.exists == 'false'
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          echo "Publishing version ${{ steps.package-version.outputs.version }} to PyPI..."
          uv publish
          echo "‚úÖ Successfully published to PyPI!"

      - name: Minimize uv cache
        run: uv cache prune --ci

      - name: Success notification
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          echo "üöÄ Release v${{ steps.package-version.outputs.version }} completed successfully!"
          echo "üì¶ Published to PyPI: https://pypi.org/project/gh-folder-download/"
          echo "üè∑Ô∏è GitHub release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.package-version.outputs.version }}"
